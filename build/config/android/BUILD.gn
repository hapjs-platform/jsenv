# Copyright (c) 2021, the hapjs-platform Project Contributors
# SPDX-License-Identifier: EPL-1.0

import("//build/config/android/config.gni")

assert(is_android)

config("compiler") {
  cflags = [
    "-fno-short-enums",
    "-funwind-tables",
  ]
  cflags_cc = []

  if (current_cpu == "arm") {
    compile_api_level = android32_ndk_api_level
  } else if (current_cpu == "x86") {
    compile_api_level = android32_ndk_api_level
  } else if (current_cpu == "arm64") {
    compile_api_level = android64_ndk_api_level
  } else if (current_cpu == "x64") {
    compile_api_level = android64_ndk_api_level
  } else if (current_cpu == "mipsel") {
    compile_api_level = android32_ndk_api_level
  } else if (current_cpu == "mips64el") {
    compile_api_level = android64_ndk_api_level
  } else {
    assert(false, "Architecture not supported")
  }

  defines = [
    "ANDROID",
    "HAVE_SYS_UIO_H",
    "__ANDROID_API__=$compile_api_level",
  ]

  ldflags = []

  if (target_cpu == "arm") {
    abi_target = "arm-linux-androideabi"
  } else if (target_cpu == "arm64") {
    abi_target = "aarch64-linux-android"
  } else if (target_cpu == "x86") {
    abi_target = "i686-linux-android"
  } else if (target_cpu == "x64") {
    abi_target = "x86_64-linux-android"
  } else {
    assert(false, "Target ABI not supported.")
  }

  if (is_clang) {
    cflags += [ "--target=$abi_target$compile_api_level" ]
    ldflags += [ "--target=$abi_target$compile_api_level" ]
  }

  # Android Linker settings
  ldflags += [
    "-nostdlib++",
    "-L${android_libcpp_lib_dir}",
    "-Wl,--exclude-libs,ALL",
    "-Wl,--warn-shared-textrel",
  ]

  # Use shared C++
  libs = [ "c" ]
  libs += [ "m" ]
  libs += [ "dl" ]
  libs += [ "c++abi" ]
  libs += [ "android" ]
  libs += [ "log" ]

  # FIXME(liushouqun): Use llvm shared libc++, need to process the "libc++_shared.so".
  libs += [ "c++_shared" ]
  libs += [ android_libgcc_file ]

  if (current_cpu == "arm" || current_cpu == "x86") {
    # In Android NDK r17, libunwind and libandroid_support are only required in
    # 32-bit build.
    if (current_cpu == "arm") {
      libs += [ "unwind" ]
    }
    libs += [ "android_support" ]
  }

  asmflags = cflags
}

copy("libc++_shared") {
  soname = "libc++_shared.so"
  sources = [ "${android_libcpp_lib_dir}/${soname}" ]

  outputs = [ "${root_out_dir}/${soname}" ]
}

config("executatble_config") {
  cflags = [ "-fPIE" ]
  asmflags = [ "-fPIE" ]
  ldflags = [
    "-pie",
    "-Bdynamic",
    "-Wl,-z,nocopyreloc",
  ]
}
